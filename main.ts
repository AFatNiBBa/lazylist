
/*
    [WIP]: slice()
        [WIP]: unsafe (ma pi√π "lazy")
    [WIP]: join()
        [WIP]: outer, inner, left, right
    [WIP]: orderBy()
        [WIP]: asc, desc
*/

/**
 * A function that takes two arguments and combines them.
 */
export type UCombine<A, B, TResult = A, T = TResult> = (a: A, b: B, i: number, data: Iterable<T>) => TResult;

/**
 * A function that converts a value.
 */
export type UConvert<X, Y, T = Y> = (x: X, i: number, data: Iterable<T>) => Y;

/**
 * A function that indicates the "truthyness" of a value.
 */
export type UPredicate<T> = UConvert<T, boolean, T>;

namespace LazyList
{
    /**
     * Indicates how two iterable should be conbined it they have different lengths.
     */
    export enum UMode {
        /** The length of the output is equal to the length of the shorter iterable. */
        inner   = 0b00,

        /** The length of the output is equal to the length of the base iterable. */
        left    = 0b01,

        /** The length of the output is equal to the length of the input iterable. */
        right   = 0b10,

        /** The length of the output is equal to the length of the longer iterable. */
        outer   = 0b11
    }

    /**
     * An iterable wrapper with helper functions.
     */
    export abstract class LazyList<O> implements Iterable<O> {
        abstract [Symbol.iterator](): Iterator<O>;
    
        /**
         * Returns an autogenerated list of numbers.
         * @param end The end of the sequence
         * @param begin The begin of the sequence
         * @param step The difference between each step of the sequence (If negative the sequence is executed inversely)
         */
        static range(end?: number, begin?: number, step?: number): LazyRangeList {
            return new LazyRangeList(end, begin, step);
        }
    
        /**
         * Returns a `LazyList` based on an iterable.
         * If `data` is already a `LazyList`, it gets returned directly.
         * @param data The iterable
         */
        static from<T>(data: Iterable<T>): LazyList<T> {
            return data instanceof LazyList
                ? data
                : new LazyDataList(data);
        }
    
        /**
         * Concats the current list to `other`.
         * @param other An iterable
         */
        concat(other: Iterable<O>): LazyConcatList<O> {
            return new LazyConcatList<O>(this, other);
        }
    
        /**
         * Combines the current list with `other` based on `f`.
         * @param other An iterable
         * @param f A combination function
         * @param mode Different length handling
         */
        zip<T, TResult>(other: Iterable<T>, f: UCombine<O, T, TResult>, mode?: UMode): LazyZipList<O, T, TResult> {
            return new LazyZipList<O, T, TResult>(this, other, f, mode);
        }
    
        /**
         * Converts the current list based on `f`.
         * @param f A conversion function
         */
        select<TResult>(f: UConvert<O, TResult>): LazySelectList<O, TResult> {
            return new LazySelectList<O, TResult>(this, f);
        }
    
        /**
         * Converts the current list to an iterables list based on `f` and concat every element.
         * @param f A conversion function; Can be omitted if every element is iterable
         */
        selectMany<TResult>(f?: UConvert<O, Iterable<TResult>, TResult>): LazySelectManyList<O, TResult> {
            return new LazySelectManyList<O, TResult>(this, f);
        }
    
        /**
         * Filters the current list based on `f`.
         * @param f A predicate function
         */
        where(f: UPredicate<O>): LazyWhereList<O> {
            return new LazyWhereList<O>(this, f);
        }
    
        /**
         * Skips the first `n` elements of the list.
         * @param n The elements to skip
         */
        skip(n: number): LazySkipList<O> {
            return new LazySkipList<O>(this, n);
        }
    
        /**
         * Takes the first `n` elements of the list and skips the rest.
         * @param n The elements to take
         * @param outer If truthy and `n` is more than the list length, the output list will be forced to have length `n` by concatenating as many `undefined` as needed
         */
        take(n: number, outer?: UMode | boolean): LazyTakeList<O> {
            return new LazyTakeList<O>(this, n, outer);
        }

        /**
         * Groups the list's elements based on a provided function.
         * Non lazy.
         * @param f A combination function
         */
        groupBy<K>(f: UConvert<O, K, UGrouping<K, O>>): LazyGroupByList<K, O> {
            return new LazyGroupByList<K, O>(this, f);
        }
    
        /**
         * Reverses the list.
         * Non lazy.
         */
        reverse(): LazyReverseList<O> {
            return new LazyReverseList<O>(this);
        }
    
        /**
         * Repeat the list's elements n times.
         * @param n The number of repetitions
         */
        repeat(n: number): LazyRepeatList<O> {
            return new LazyRepeatList<O>(this, n);
        }

        /**
         * Caches the list's calculated elements, this prevent them from passing inside the pipeline again.
         */
        cache(): LazyCacheList<O> {
            return new LazyCacheList<O>(this);
        }

        /**
         * Outputs a `LazyList` that will contain the current one as its only element.
         */
        wrap(): LazyWrapList<this> {
            return new LazyWrapList<this>(this);
        }

        /**
         *  Utility function that specifies how two iterables of different lengths should be conbined.
         * @param other An iterable
         * @param mode Different length handling
         */
        adjust<T>(other: Iterable<T>, mode?: UMode): LazyZipList<O, T, [ O, T ]> {
            return new LazyZipList<O, T, [ O, T ]>(this, other, (a, b) => [ a, b ], mode);
        }

        /**
         * Calculates each element of the list and wraps them in another `LazyList`.
         */
        calc(): LazyDataList<O, O> {
            return LazyList.from(this.value) as LazyDataList<O, O>;
        }
    
        /**
         * Aggregates the current list based on `f`.
         * @param f A combination function
         * @param out The initial state of the aggregation; It defaults to the first element (Which will be skipped in the iteration).
         */
        aggregate<TResult = O>(f: UCombine<TResult, O, TResult, O>, out?: TResult): TResult {
            var i = 0;
            for (const e of this)
                out = (!i && arguments.length === 1)
                    ? e as any as TResult
                    : f(out, e, i, this),
                i++;
            return out;
        }
    
        /**
         * Returns the element at the provided index.
         * @param n The index
         */
        at(n: number): O {
            return this.skip(n).first();
        }

        /**
         * Gets the first element of the list or `def` as default if it's empty.
         * @param def The default value
         */
        first<T>(def: T = null): O | T {
            for (const e of this)
                return e;
            return def;
        }

        /**
         * Gets the last element of the list or `def` as default if it's empty.
         * @param def The default value
         */
        last<T>(out: O | T = null): O | T {
            for (const e of this)
                out = e;
            return out;
        }

        /**
         * Returns `true` if `f` returns `true` for at least one element of the list.
         * @param f A predicate function; It defaults to the identity function
         */
        any(f?: UPredicate<O>): boolean {
            var i = 0;
            for (const e of this)
                if (f ? f(e, i++, this) : e)
                    return true;
            return false;
        }

        /**
         * Returns `true` if `f` returns `true` for every element of the list.
         * @param f A predicate function; It defaults to the identity function
         */
        all(f?: UPredicate<O>): boolean {
            var i = 0;
            for (const e of this)
                if (!(f ? f(e, i++, this) : e))
                    return false;
            return true;
        }
    
        /**
         * Calculates each element of the list and puts them inside of an `Array`.
         */
        get value(): O[] {
            return Array.from(this);
        }

        /**
         * Calculates the length of the list.
         */
        get count(): number {
            var i = 0;
            for (const _ of this)
                i++;
            return i;
        }

        /**
         * Calculates the average of the elements of the list.
         */
        get avg(): number {
            var i = 0, sum = 0;
            for (const e of this)
                sum += e as any as number,
                i++;
            return sum / i;
        }

        /**
         * Aggregates the list using the `+` operator (Can both add numbers and concatenate strings).
         */
        get sum(): O {
            //@ts-ignore
            return this.aggregate((a, b) => a + b);
        }
    
        /**
         * Returns the biggest number in the list.
         */
        get max(): O {
            return this.aggregate((a, b) => a > b ? a : b);
        }
    
        /**
         * Returns the smallest number in the list.
         */
        get min(): O {
            return this.aggregate((a, b) => a < b ? a : b);
        }
    }

    /**
     * Output of `LazyList.range()`.
     */
    export class LazyRangeList extends LazyList<number> {
        constructor(public end: number = Infinity, public begin: number = 0, public step: number = 1) { super(); }

        *[Symbol.iterator](): Iterator<number> {
            if (this.step < 0)
                for (let i = this.end - 1; i >= this.begin; i += this.step)
                    yield i;
            else
                for (let i = this.begin; i < this.end; i += this.step)
                    yield i;
        }
    }

    /**
     * Output of `LazyList.from()`.
     * Instances of this class are guaranteed to have a base iterable.
     * The input iterable's elements are of type `<I>` and the output's ones are of type `<O>`.
     */
    export class LazyDataList<I, O> extends LazyList<O> {
        constructor(public data: Iterable<I>) { super(); }

        *[Symbol.iterator](): Iterator<O> {
            yield* this.data as any as Iterable<O>;
        }

        /**
         * Calculate the base iterable.
         */
        base(): O[] {
            return this.data instanceof Array
                ? this.data
                : Array.from(this.data);
        }

        get count() {
            return this.data instanceof Array
                ? this.data.length
                : super.count;
        }

        last<T>(def: T = null): O | T {
            return this.data instanceof Array
                ? this.data.length > 0
                    ? this.data[this.data.length - 1]
                    : def
                : super.last(def);
        }
    }

    /**
     * Output of `list.concat()`.
     */
    export class LazyConcatList<T> extends LazyDataList<T, T> {
        constructor(data: Iterable<T>, public other: Iterable<T>) { super(data); }

        *[Symbol.iterator](): Iterator<T> {
            yield* this.data;
            yield* this.other;
        }
    }

    /**
     * Output of `list.zip()`.
     */
    export class LazyZipList<A, B, TResult> extends LazyDataList<A, TResult> {
        constructor(data: Iterable<A>, public other: Iterable<B>, public f: UCombine<A, B, TResult>, public mode: UMode = UMode.inner) { super(data); }

        *[Symbol.iterator](): Iterator<TResult> {
            var i = 0;
            const a = this.data[Symbol.iterator]();
            const b = this.other[Symbol.iterator]();
            while(true)
            {
                const e = a.next();
                const f = b.next();
                if (e.done && f.done || e.done && !(this.mode & UMode.right) || f.done && !(this.mode & UMode.left))
                    break;
                yield this.f(e.value, f.value, i++, this);
            }
        }
    }

    /**
     * Output of `list.select()`.
     */
    export class LazySelectList<X, Y> extends LazyDataList<X, Y> {
        constructor(data: Iterable<X>, public f: UConvert<X, Y>) { super(data); }

        *[Symbol.iterator](): Iterator<Y> {
            var i = 0;
            for (const e of this.data)
                yield this.f(e, i++, this);
        }
    }

    /**
     * Output of `list.selectMany()`.
     */
    export class LazySelectManyList<X, Y> extends LazyDataList<X, Y> {
        constructor(data: Iterable<X>, public f?: UConvert<X, Iterable<Y>, Y>) { super(data); }

        *[Symbol.iterator](): Iterator<Y> {
            var i = 0;
            for (const e of this.data)
                yield* this.f
                    ? this.f(e, i++, this)
                    : (e as any as Iterable<Y>);
        }
    }

    /**
     * Output of `list.where()`.
     */
    export class LazyWhereList<T> extends LazyDataList<T, T> {
        constructor(data: Iterable<T>, public f: UPredicate<T>) { super(data); }

        *[Symbol.iterator](): Iterator<T> {
            var i = 0;
            for (const e of this.data)
                if (this.f(e, i++, this))
                    yield e;
        }
    }

    /**
     * Output of `list.skip()`.
     */
    export class LazySkipList<T> extends LazyDataList<T, T> {
        constructor(data: Iterable<T>, public n: number) { super(data); }

        *[Symbol.iterator](): Iterator<T> {
            var i = 0;
            for (const e of this.data)
                if (++i > this.n)
                    yield e;
        }
    }

    /**
     * Output of `list.take()`.
     */
    export class LazyTakeList<T> extends LazyDataList<T, T> {
        constructor(data: Iterable<T>, public n: number, public outer: UMode | boolean = false) { super(data); }

        *[Symbol.iterator](): Iterator<T> {
            const iter = this.data[Symbol.iterator]();
            for (var i = 0; i < this.n; i++)
            {
                const e = iter.next();
                if (e.done && !this.outer)
                    break;
                yield e.value;
            }
        }
    }

    /**
     * Element of the output of `list.groupBy()`.
     * The group common value is contained in the "key" property.
     * The group is a `LazyList` itself.
     */
    export class UGrouping<K, V> extends LazyDataList<V, V> {
        constructor(public key: K, data: Iterable<V>) { super(data); }
    }

    /**
     * Output of `list.groupBy()`.
     */
    export class LazyGroupByList<K, V> extends LazyDataList<V, UGrouping<K, V>> {
        constructor(data: Iterable<V>, public f: UConvert<V, K, UGrouping<K, V>>) { super(data); }

        *[Symbol.iterator](): Iterator<UGrouping<K, V>> {
            var i = 0;
            const cache = new Map<K, V[]>();
            for (const e of this.data)
            {
                const k = this.f(e, i++, this);
                if (cache.has(k))
                    cache.get(k).push(e);
                else
                    cache.set(k, [ e ]);           
            }
            for (const [ k, v ] of cache)
                yield new UGrouping<K, V>(k, v);
        }
    }

    /**
     * Output of `list.reverse()`.
     */
    export class LazyReverseList<T> extends LazyDataList<T, T> {
        constructor(data: Iterable<T>) { super(data); }

        *[Symbol.iterator](): Iterator<T> {
            const out = this.base();
            for (let i = out.length - 1; i >= 0; i--)
                yield out[i];
        }
    }

    /**
     * Output of `list.repeat()`.
     */
    export class LazyRepeatList<T> extends LazyDataList<T, T> {
        constructor(data: Iterable<T>, public n: number) { super(data); }

        *[Symbol.iterator](): Iterator<T> {
            for (let i = 0; i < this.n; i++)
                yield* this.data;
        }
    }

    /**
     * Output of `list.cache()`.
     */
    export class LazyCacheList<T> extends LazyDataList<T, T> {
        result: T[] = [];
        iter: Iterator<T>;
        e: IteratorResult<T>;
        constructor(data: Iterable<T>) { super(data); }

        *[Symbol.iterator](): Iterator<T> {
            for (var i = 0; i < this.result.length; i++)
                yield this.result[i];
            while (true)
                if ((this.e = (this.iter ??= this.data[Symbol.iterator]()).next()).done)
                    break;
                else 
                    yield this.result[i++] = this.e.value;
        }

        at(n: number): T {
            return n < this.result.length
                ? this.result[n]
                : super.at(n);
        }

        get count(): number {
            return this.e?.done
                ? this.result.length
                : super.count;
        }
    }

    /**
     * Output of `list.wrap()`.
     */
    export class LazyWrapList<T> extends LazyList<T> {
        constructor(public data: T) { super(); }

        *[Symbol.iterator]() { yield this.data; }

        get value(): T[] { return [ this.data ]; }
    
        get count(): number { return 1; }
    
        first(): T { return this.data; }

        last(): T { return this.data; }
    }
}

if (typeof module !== "object")
    var module = {};
//@ts-ignore
export = LazyList = Object.assign(LazyList.LazyList, LazyList);